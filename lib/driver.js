// Generated by CoffeeScript 1.10.0
(function() {
  var DBI, Errorlet, PostgresDriver, Promise, debug, pg,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  pg = require('pg');

  DBI = require('easydbi');

  debug = require('debug')('easydbi-pg');

  Errorlet = require('errorlet');

  Promise = require('bluebird');

  Promise.promisifyAll(pg.Client.prototype);

  PostgresDriver = (function(superClass) {
    extend(PostgresDriver, superClass);

    PostgresDriver.pool = false;

    PostgresDriver.id = 0;

    function PostgresDriver(key1, options1) {
      this.key = key1;
      this.options = options1;
      PostgresDriver.__super__.constructor.call(this, this.key, this.options);
      this.connstr = this.makeConnStr(this.options);
      this.type = 'pg';
      this.transStack = 0;
      this.transStack = [];
    }

    PostgresDriver.prototype.makeConnStr = function(options) {
      return options;
    };

    PostgresDriver.prototype.innerConnect = function(cb) {
      var self;
      debug("PostgresDriver.connect", this.options);
      self = this;
      this.inner = new pg.Client(this.connstr);
      return this.inner.connect((function(_this) {
        return function(err) {
          if (err) {
            return cb(err);
          } else {
            debug('PostgresDriver.connect:OK', self.id);
            return cb(null, self);
          }
        };
      })(this));
    };

    PostgresDriver.prototype.innerIsConnected = function() {
      var val;
      val = this.inner instanceof pg.Client;
      debug("PostgresDriver.isConnected", this.inner instanceof pg.Client);
      return val;
    };

    PostgresDriver.prototype.normalizeArguments = function(args) {
      var arg, key, normedArgs;
      normedArgs = {};
      for (key in args) {
        arg = args[key];
        if (arg instanceof Object) {
          normedArgs[key] = JSON.stringify(arg);
        } else {
          normedArgs[key] = arg;
        }
      }
      return normedArgs;
    };

    PostgresDriver.prototype.innerQuery = function(key, args, cb) {
      var e, error, i, keyGen, ref;
      debug('PostgresDriver.query', JSON.stringify(key), args);
      try {
        i = 0;
        keyGen = function() {
          i = i + 1;
          return "$" + i;
        };
        ref = DBI.queryHelper.arrayify(key, this.normalizeArguments(args), {
          key: keyGen
        }), key = ref[0], args = ref[1];
        return this._query(key, args, cb);
      } catch (error) {
        e = error;
        return cb(e);
      }
    };

    PostgresDriver.prototype._query = function(stmt, args, cb) {
      return this.inner.query(stmt, args, (function(_this) {
        return function(err, result) {
          if (err) {
            debug("PostgresDriver._query:ERROR, %s", err.stack);
            return cb(err);
          } else if (result.rows instanceof Array && stmt.match(/^\s*select/i)) {
            return cb(null, result.rows);
          } else {
            return cb(null);
          }
        };
      })(this));
    };

    PostgresDriver.prototype.savePointName = function() {
      return "sp_" + this.id + "_" + this.transStack.length;
    };

    PostgresDriver.prototype.innerBegin = function(cb) {
      var savePoint;
      savePoint = null;
      return this.inner.queryAsync('begin').then((function(_this) {
        return function() {
          if (_this.transStack.length > 0) {
            savePoint = _this.savePointName();
            return _this.inner.queryAsync("SAVEPOINT " + savePoint);
          } else {

          }
        };
      })(this)).then((function(_this) {
        return function() {
          _this.transStack.push(savePoint);
          return cb(null);
        };
      })(this))["catch"]((function(_this) {
        return function(e) {
          return cb(e);
        };
      })(this));
    };

    PostgresDriver.prototype.innerCommit = function(cb) {
      var query, savePoint;
      if (this.transStack.length === 0) {
        return cb(new Errorlet({
          error: 'negative_transcount',
          method: 'PostgresDriver.commit'
        }));
      }
      savePoint = this.transStack.pop();
      query = this.transStack.length === 0 ? "commit" : "release savepoint " + savePoint;
      return this.inner.queryAsync(query).then(function() {
        return cb(null);
      })["catch"](cb);
    };

    PostgresDriver.prototype.innerRollback = function(cb) {
      var query, savePoint;
      if (this.transStack.length === 0) {
        return cb(new Errorlet({
          error: 'negative_transcount',
          method: 'PostgresDriver.commit'
        }));
      }
      savePoint = this.transStack.pop();
      query = this.transStack.length === 0 ? "rollback" : "rollback to savepoint " + savePoint;
      return this.inner.queryAsync(query).then(function() {
        return cb(null);
      })["catch"](cb);
    };

    PostgresDriver.prototype.innerDisconnect = function(cb) {
      var e, error;
      try {
        this.inner.end();
        return cb(null);
      } catch (error) {
        e = error;
        return cb(e);
      }
    };

    PostgresDriver.prototype.innerClose = function(cb) {
      var e, error;
      try {
        this.inner.end();
        return cb(null);
      } catch (error) {
        e = error;
        return cb(e);
      }
    };

    return PostgresDriver;

  })(DBI.Driver);

  DBI.register('pg', PostgresDriver);

  module.exports = PostgresDriver;

}).call(this);
